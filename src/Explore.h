/**
 * This file contains the class Explore.
 * The purpose of this class is to create the
 * main tree of the 2x2 cube. It needs
 * around 150 MB and 3 second.
 */

#ifndef SOLVER2X2_CXX_EXPLORE_H
#define SOLVER2X2_CXX_EXPLORE_H

#include "Coords.h"

/**
 * The total cases of the 2x2 cube.
 * It's computed by 7!*3^6.
 */
#define CUBE_CASES 3674160

/**
 * The max number of moves necessary to solve
 * the 2x2 cube.
 */
#define MAX_DEPTH 12

namespace Solver2x2{

    /**
     * Explore class.
     * Compute all the 2x2 cases.
     */
    class Explore{
    private:

        /**
         * These are precomputed empiric values.
         * They indicate the number of different
         * cubes generated with n moves.
         * For example, with 3 moves you can generate
         * 9+53+321 different cubes.
         */
        constexpr static const int32_t DEPTH_SIZE[MAX_DEPTH] = {
                1,
                9,
                54,
                321,
                1847,
                9992,
                50136,
                227536,
                870072,
                1887748,
                623800,
                2644
        };

        /**
         * The node for a cube.
         */
        typedef struct{
            ///Corner orientation
            uint16_t o;
            ///Corner permutation
            uint16_t p;
            ///Sons idx in the next depth
            int32_t s[N_MOVES];
        }CubeNode;

        /**
         * Tree class.
         * This class contains the tree
         * generated by the algorithm.
         * It also contains the explored
         * cubes. Useful during the exploration.
         */
        class Tree{//144 MB (((1+2+2+4×9)×7!×3^6)÷1024)÷1024
        public:

            /**
             * The array of the cubes in the tree.
             */
            CubeNode* cubeArray;

            /**
             * The array of the cubes already explored.
             */
            bool* exploredArray;

            /**
             * The cubes tree matrix. Its an implementation
             * of DEPTH_SIZE array.
             */
            CubeNode* t[MAX_DEPTH]{};

            /**
             * The explored cubes matrix.
             */
            bool* explored[ORI_CASES]{};

            /**
             * Allocate the tree and the explored array.
             */
            Tree();

            /**
             * Deallocate the tree and the explored array.
             */
            ~Tree();
        };

    public:

        /**
         * Scramble class
         * It contains the all the scrambles from the tree.
         */
        class Scramble{//29 MB ((7!×3^6×8)÷1024)÷1024
        public:

            /**
             * The array of the scrambles converted from the tree.
             */
            uint64_t* scrambleArray;

            /**
             * The matrix of the scrambles converted from the tree.
             */
            uint64_t* s[ORI_CASES]{};


            /**
             * Allocate the scrambles.
             */
            Scramble();

            /**
             * Deallocate the scrambles.
             */
            ~Scramble();

            /**
             * Clone the scrambles.
             *
             * @return      : The new tree.
             */
            Scramble* clone() const;

            /**
             * Return the solve move.
             *
             * @param ori       : Corner orientation.
             * @param perm      : Corner permutation.
             * @return          : The algorithm to solve the cube,
             */
            uint64_t solve(uint16_t ori, uint16_t perm);
        };

    public:

        /**
         * Coords used in the tree exploration.
         */
        Coords coords;

        /**
         * Its used to convert the tree into scrambles.
         */
        Scramble scramble;

        /**
         * The tree generated by the search.
         */
         Tree tree;

        /**
         * Initialize the algorithm.
         *
         * @param coords    : The coords object to use in the exploration.
         */
        explicit Explore(const Coords& coords);

        /**
         * Default initializer.
         */
        Explore() = default;

        /**
         * Set the coordinate.
         * @param coords
         */
        void setCoords(const Coords& coords);

        /**
         * Generate the tree. It took around 1 second.
         */
        void generate();

        /**
         * Reallocate the tree and the explored cubes.
         */
        void clean();

        /**
         * Return the solve move.
         *
         * @param ori       : Corner orientation.
         * @param perm      : Corner permutation.
         * @return          : The algorithm to solve the cube,
         */
        uint64_t solve(uint16_t ori, uint16_t perm);

        /**
         * Convert the compressed scramble to solve the cube into a string.
         *
         * @param scramble  : Compressed scramble.
         * @return          : Scramble string.
         */
        static std::string convert(uint64_t scramble);

        /**
         * Clone the scramble and return the pointer.
         *
         * @return          : THe pointer of the cloned scramble.
         */
        Scramble* getScramble() const;

    private:

        /**
         * Generate the sons of a particular depth.
         *
         * @param depth     : The depth from generate the sons.
         * @return          : The number of cubes found.
         */
        int32_t expand(int8_t depth);

        /**
         * Check if a cube is already explored by the algorithm.
         *
         * @param o     : Corner orientation.
         * @param p     : Corner permutation.
         * @return      : True if its already explored, false if not.
         */
        bool isExplored(uint16_t o, uint16_t p);
    };
}

#endif //SOLVER2X2_CXX_EXPLORE_H
